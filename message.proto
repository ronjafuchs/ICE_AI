syntax = "proto3";

import "enum.proto";

package service;

message GrpcHitArea {
  int32 left = 1;
  int32 right = 2;
  int32 top = 3;
  int32 bottom = 4;
}

message GrpcAttackData {
  GrpcHitArea setting_hit_area = 1;
  int32 setting_speed_x = 2;
  int32 setting_speed_y = 3;
  GrpcHitArea current_hit_area = 4;
  int32 current_frame = 5;
  bool player_number = 6;
  int32 speed_x = 7;
  int32 speed_y = 8;
  int32 start_up = 9;
  int32 active = 10;
  int32 hit_damage = 11;
  int32 guard_damage = 12;
  int32 start_add_energy = 13;
  int32 hit_add_energy = 14;
  int32 guard_add_energy = 15;
  int32 give_energy = 16;
  int32 impact_x = 17;
  int32 impact_y = 18;
  int32 give_guard_recov = 19;
  int32 attack_type = 20;
  bool down_prop = 21;
  bool is_projectile = 22;
}

message GrpcCharacterData {
  bool player_number = 1;
  int32 hp = 2;
  int32 energy = 3;
  int32 x = 4;
  int32 y = 5;
  int32 left = 6;
  int32 right = 7;
  int32 top = 8;
  int32 bottom = 9;
  int32 speed_x = 10;
  int32 speed_y = 11;
  GrpcState state = 12;
  GrpcAction action = 13;
  bool front = 14;
  bool control = 15;
  GrpcAttackData attack_data = 16;
  int32 remaining_frame = 17;
  bool hit_confirm = 18;
  int32 graphic_size_x = 19;
  int32 graphic_size_y = 20;
  int32 graphic_adjust_x = 21;
  int32 hit_count = 22;
  int32 last_hit_frame = 23;
  GrpcKey key = 24;
}

message GrpcFrameData {
  repeated GrpcCharacterData character_data = 1;
  int32 current_frame_number = 2;
  int32 current_round = 3;
  repeated GrpcAttackData projectile_data = 4;
  bool empty_flag = 5;
  repeated bool front = 6;
}

message GrpcFftData {
  bytes real_data_as_bytes = 1;
  bytes imaginary_data_as_bytes = 2;
}

message GrpcScreenData {
  bytes display_bytes = 1;
}

message GrpcAudioData {
  bytes raw_data_as_bytes = 1;
  repeated GrpcFftData fft_data = 2;
  bytes spectrogram_data_as_bytes = 3;
}

message GrpcGameData {
  repeated int32 max_hps = 1;
  repeated int32 max_energies = 2;
  repeated string character_names = 3;
  repeated string ai_names = 4;
}

message GrpcRoundResult {
  int32 current_round = 1;
  repeated int32 remaining_hps = 2;
  int32 elapsed_frame = 3;
}

message GrpcKey {
  bool A = 1;
  bool B = 2;
  bool C = 3;
  bool U = 4;
  bool R = 5;
  bool D = 6;
  bool L = 7;
}
